{"remainingRequest":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\src\\Views\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\src\\Views\\App.vue","mtime":1632717241638},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}