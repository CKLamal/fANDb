{"remainingRequest":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\src\\Views\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\src\\Views\\App.vue","mtime":1632717241638},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\cklam\\env\\JHU-Covidbot-Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBXZWxjb21lIGZyb20gIi4vV2VsY29tZS52dWUiOwppbXBvcnQgRXJyb3IgZnJvbSAiQC9Db21wb25lbnRzL1BhcnRzL0Vycm9yLnZ1ZSI7CmltcG9ydCBUb3BIZWFkIGZyb20gIkAvQ29tcG9uZW50cy9QYXJ0cy9Ub3BIZWFkLnZ1ZSI7CmltcG9ydCBDaGF0SW5wdXQgZnJvbSAiQC9Db21wb25lbnRzL1BhcnRzL0NoYXRJbnB1dC52dWUiOwppbXBvcnQgUmljaENvbXBvbmVudCBmcm9tICJAL0NvbXBvbmVudHMvUmljaC9Db21wb25lbnQudnVlIjsKaW1wb3J0IEJ1YmJsZSBmcm9tICJAL0NvbXBvbmVudHMvUmljaC9CdWJibGUudnVlIjsKaW1wb3J0IEJ1YmJsZVdyYXBwZXIgZnJvbSAiQC9Db21wb25lbnRzL1JpY2gvQnViYmxlV3JhcHBlci52dWUiOwppbXBvcnQgQ2FyZCBmcm9tICJAL0NvbXBvbmVudHMvUmljaC9DYXJkLnZ1ZSI7CmltcG9ydCBDYXJkQnV0dG9uIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL0NhcmRCdXR0b24udnVlIjsKaW1wb3J0IENhcm91c2VsIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL0Nhcm91c2VsLnZ1ZSI7CmltcG9ydCBMaXN0IGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL0xpc3QudnVlIjsKaW1wb3J0IExpc3RJdGVtIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL0xpc3RJdGVtLnZ1ZSI7CmltcG9ydCBQaWN0dXJlIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL1BpY3R1cmUudnVlIjsKaW1wb3J0IE1lZGlhIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL01lZGlhLnZ1ZSI7CmltcG9ydCBUYWJsZUNhcmQgZnJvbSAiQC9Db21wb25lbnRzL1JpY2gvVGFibGVDYXJkLnZ1ZSI7CmltcG9ydCBTdWdnZXN0aW9uIGZyb20gIkAvQ29tcG9uZW50cy9SaWNoL1N1Z2dlc3Rpb24udnVlIjsKaW1wb3J0ICogYXMgdXVpZHYxIGZyb20gInV1aWQvdjEiOyAvL2ltcG9ydCB7IENsaWVudCB9IGZyb20gImRpYWxvZ2Zsb3ctZ2F0ZXdheSI7CgpmdW5jdGlvbiB1cmxpZnkodGV4dCkgewogIHZhciB1cmxSZWdleCA9IC8oXGIoaHR0cHM/fGZ0cHxmaWxlKTpcL1wvWy1BLVowLTkrJkAjXC8lPz1+X3whOiwuO10qWy1BLVowLTkrJkAjXC8lPX5ffF0pL2dpOwogIHJldHVybiB0ZXh0LnJlcGxhY2UodXJsUmVnZXgsIGZ1bmN0aW9uICh1cmwpIHsKICAgIHJldHVybiAnPGEgY2xhc3M9ImIiIGhyZWY9IicgKyB1cmwgKyAnIiB0YXJnZXQ9Il9ibGFuayI+JyArIHVybCArICI8L2E+IjsKICB9KTsgLy8gb3IgYWx0ZXJuYXRpdmVseQogIC8vIHJldHVybiB0ZXh0LnJlcGxhY2UodXJsUmVnZXgsICc8YSBocmVmPSIkMSI+JDE8L2E+JykKfQoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBcHAiLAogIGNvbXBvbmVudHM6IHsKICAgIFdlbGNvbWU6IFdlbGNvbWUsCiAgICBFcnJvcjogRXJyb3IsCiAgICBUb3BIZWFkOiBUb3BIZWFkLAogICAgQ2hhdElucHV0OiBDaGF0SW5wdXQsCiAgICBSaWNoQ29tcG9uZW50OiBSaWNoQ29tcG9uZW50LAogICAgQnViYmxlOiBCdWJibGUsCiAgICBCdWJibGVXcmFwcGVyOiBCdWJibGVXcmFwcGVyLAogICAgQ2FyZDogQ2FyZCwKICAgIENhcmRCdXR0b246IENhcmRCdXR0b24sCiAgICBDYXJvdXNlbDogQ2Fyb3VzZWwsCiAgICBMaXN0OiBMaXN0LAogICAgTGlzdEl0ZW06IExpc3RJdGVtLAogICAgUGljdHVyZTogUGljdHVyZSwKICAgIE1lZGlhOiBNZWRpYSwKICAgIFRhYmxlQ2FyZDogVGFibGVDYXJkLAogICAgU3VnZ2VzdGlvbjogU3VnZ2VzdGlvbgogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFwcDogbnVsbCwKICAgICAgbWVzc2FnZXM6IFtdLAogICAgICBsYW5ndWFnZTogIiIsCiAgICAgIHNlc3Npb246ICIiLAogICAgICBtdXRlZDogdHJ1ZSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGVycm9yOiBudWxsIC8vY2xpZW50OiBuZXcgbmV3IENsaWVudCh0aGlzLmNvbmZpZy5lbmRwb2ludCkuY29ubmVjdCgpLAoKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgLyogVGhlIGNvZGUgYmVsb3cgaXMgdXNlZCB0byBleHRyYWN0IHN1Z2dlc3Rpb25zIGZyb20gbGFzdCBtZXNzYWdlLCB0byBkaXNwbGF5IGl0IG9uIENoYXRJbnB1dCAqLwogICAgc3VnZ2VzdGlvbnM6IGZ1bmN0aW9uIHN1Z2dlc3Rpb25zKCkgewogICAgICBpZiAodGhpcy5tZXNzYWdlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGxhc3RfbWVzc2FnZSA9IHRoaXMubWVzc2FnZXNbdGhpcy5tZXNzYWdlcy5sZW5ndGggLSAxXTsKICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBbXTsKICAgICAgICAvKiBEaWFsb2dmbG93IFN1Z2dlc3Rpb25zICovCgogICAgICAgIGZvciAodmFyIGNvbXBvbmVudCBpbiBsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudE1lc3NhZ2VzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudE1lc3NhZ2VzW2NvbXBvbmVudF0pOwogICAgICAgICAgaWYgKGxhc3RfbWVzc2FnZS5kYXRhLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XS5zdWdnZXN0aW9ucykgc3VnZ2VzdGlvbnMudGV4dF9zdWdnZXN0aW9ucyA9IGxhc3RfbWVzc2FnZS5kYXRhLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XS5zdWdnZXN0aW9ucy5zdWdnZXN0aW9ucy5tYXAoZnVuY3Rpb24gKHN1Z2dlc3Rpb24pIHsKICAgICAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24udGl0bGU7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmIChsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudE1lc3NhZ2VzW2NvbXBvbmVudF0ubGlua091dFN1Z2dlc3Rpb24pIHN1Z2dlc3Rpb25zLmxpbmtfc3VnZ2VzdGlvbiA9IGxhc3RfbWVzc2FnZS5kYXRhLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XS5saW5rT3V0U3VnZ2VzdGlvbjsKCiAgICAgICAgICBpZiAobGFzdF9tZXNzYWdlLmRhdGEucXVlcnlSZXN1bHQuZnVsZmlsbG1lbnRNZXNzYWdlc1tjb21wb25lbnRdLnF1aWNrUmVwbGllcykgewogICAgICAgICAgICBjb25zb2xlLmxvZygiZW50ZXIgcXVpY2sgcmVwbHkiKTsKICAgICAgICAgICAgc3VnZ2VzdGlvbnMudGV4dF9zdWdnZXN0aW9ucyA9IGxhc3RfbWVzc2FnZS5kYXRhLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XS5xdWlja1JlcGxpZXMucXVpY2tSZXBsaWVzOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvKiBHb29nbGUgU3VnZ2VzdGlvbnMgKi8KCgogICAgICAgIGlmIChsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZCAmJiBsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZC5nb29nbGUpIHsKICAgICAgICAgIGZvciAodmFyIF9jb21wb25lbnQgaW4gbGFzdF9tZXNzYWdlLmRhdGEucXVlcnlSZXN1bHQud2ViaG9va1BheWxvYWQuZ29vZ2xlKSB7CiAgICAgICAgICAgIGlmIChsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZC5nb29nbGVbX2NvbXBvbmVudF0uc3VnZ2VzdGlvbnMpIHN1Z2dlc3Rpb25zLnRleHRfc3VnZ2VzdGlvbnMgPSBsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZC5nb29nbGVbX2NvbXBvbmVudF0uc3VnZ2VzdGlvbnMubWFwKGZ1bmN0aW9uIChzdWdnZXN0aW9uKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN1Z2dlc3Rpb24udGl0bGU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAobGFzdF9tZXNzYWdlLmRhdGEucXVlcnlSZXN1bHQud2ViaG9va1BheWxvYWQuZ29vZ2xlW19jb21wb25lbnRdLmxpbmtPdXRTdWdnZXN0aW9uKSBzdWdnZXN0aW9ucy5saW5rX3N1Z2dlc3Rpb24gPSBsYXN0X21lc3NhZ2UuZGF0YS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZC5nb29nbGVbX2NvbXBvbmVudF0ubGlua091dFN1Z2dlc3Rpb247CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3VnZ2VzdGlvbnM7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgdGV4dF9zdWdnZXN0aW9uczogdGhpcy5jb25maWcuc3RhcnRfc3VnZ2VzdGlvbnMgLy8gPC0gaWYgbm8gbWVzc2FnZXMgYXJlIHByZXNlbnQsIHJldHVybiBzdGFydF9zdWdnZXN0aW9ucywgZnJvbSBjb25maWcuanMgdG8gaGVscCB1c2VyIGZpZ3VyZSBvdXQgd2hhdCBoZSBjYW4gZG8gd2l0aCB5b3VyIGFwcGxpY2F0aW9uCgogICAgICB9OwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIC8qIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkLCB3aGVuIG5ldyBtZXNzYWdlcyBhcnJpdmUgKi8KICAgIG1lc3NhZ2VzOiBmdW5jdGlvbiBtZXNzYWdlcyhfbWVzc2FnZXMpIHsKICAgICAgY29uc29sZS5sb2coJ2VudGVyIG1lc3NhZ2VzIHdhdGNoIGZ1bmN0aW9uJyk7CiAgICAgIGlmICh0aGlzLmhpc3RvcnkoKSkgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgibWVzc2FnZV9oaXN0b3J5IiwgSlNPTi5zdHJpbmdpZnkoX21lc3NhZ2VzKSk7IC8vIDwtIFNhdmUgaGlzdG9yeSBpZiB0aGUgZmVhdHVyZSBpcyBlbmFibGVkCgogICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShfbWVzc2FnZXMpKTsKICAgICAgY29uc29sZS5sb2coJ2V4aXQgbWVzc2FnZXMgd2F0Y2ggZnVuY3Rpb24nKTsKICAgIH0sCgogICAgLyogVGhpcyBmdW5jdGlvbiBpcyB0cmlnZ2VyZWQsIHdoZW4gcmVxdWVzdCBpcyBzdGFydGVkIG9yIGZpbmlzaGVkICovCiAgICBsb2FkaW5nOiBmdW5jdGlvbiBsb2FkaW5nKCkgewogICAgICBjb25zb2xlLmxvZygnZW50ZXIgbG9hZGluZyB3YXRjaCBmdW5jdGlvbicpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYXBwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2FwcCIpOyAvLyA8LSBXZSBuZWVkIHRvIHNjcm9sbCBkb3duICNhcHAsIHRvIHByZXZlbnQgdGhlIHdob2xlIHBhZ2UganVtcGluZyB0byBib3R0b20sIHdoZW4gdXNpbmcgaW4gaWZyYW1lCgogICAgICAgIGlmIChhcHAucXVlcnlTZWxlY3RvcigiI21lc3NhZ2UiKSkgewogICAgICAgICAgdmFyIG1lc3NhZ2UgPSBhcHAucXVlcnlTZWxlY3RvckFsbCgiI21lc3NhZ2UiKVthcHAucXVlcnlTZWxlY3RvckFsbCgiI21lc3NhZ2UiKS5sZW5ndGggLSAxXS5vZmZzZXRUb3AgLSA2ODsKICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7CiAgICAgICAgICAgIHRvcDogbWVzc2FnZSwKICAgICAgICAgICAgYmVoYXZpb3I6ICJzbW9vdGgiCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sIDIpOyAvLyA8LSB3YWl0IGZvciByZW5kZXIgKHRpbWVvdXQpIGFuZCB0aGVuIHNtb290aGx5IHNjcm9sbCAjYXBwIGRvd24gdG8gdGhlIGxhc3QgbWVzc2FnZQoKICAgICAgY29uc29sZS5sb2coJ2V4aXQgbG9hZGluZyB3YXRjaCBmdW5jdGlvbicpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIGNvbnNvbGUubG9nKCdlbnRlciBjcmVhdGVkIHdhdGNoIGZ1bmN0aW9uJyk7CiAgICAvKiBJZiBoaXN0b3J5IGlzIGVuYWJsZWQsIHRoZSBtZXNzYWdlcyBhcmUgcmV0cmlldmVkIGZyb20gc2Vzc2lvblN0b3JhZ2UgKi8KCiAgICBjb25zb2xlLmxvZygiY3JlYXRlZCBicmFuY2ggYSIpOwoKICAgIGlmICh0aGlzLmhpc3RvcnkoKSAmJiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJtZXNzYWdlX2hpc3RvcnkiKSAhPT0gbnVsbCkgewogICAgICB0aGlzLm1lc3NhZ2VzID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJtZXNzYWdlX2hpc3RvcnkiKSk7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMubWVzc2FnZXMpOwogICAgfQogICAgLyogU2Vzc2lvbiBzaG91bGQgYmUgcGVyc2lzdGVudCAoaW4gY2FzZSBvZiBwYWdlIHJlbG9hZCwgdGhlIGNvbnRleHQgc2hvdWxkIHN0YXkpICovCgoKICAgIGNvbnNvbGUubG9nKCJjcmVhdGVkIGJyYW5jaCBiIik7CgogICAgaWYgKHRoaXMuaGlzdG9yeSgpICYmIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oInNlc3Npb24iKSAhPT0gbnVsbCkgewogICAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJzZXNzaW9uIik7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2Vzc2lvbik7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnNlc3Npb24gPSB1dWlkdjEoKTsKICAgICAgaWYgKHRoaXMuaGlzdG9yeSgpKSBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCJzZXNzaW9uIiwgdGhpcy5zZXNzaW9uKTsKICAgIH0KICAgIC8qIENhY2hlIEFnZW50ICh0aGlzIHdpbGwgc2F2ZSBiYW5kd2l0aCkgKi8KCgogICAgY29uc29sZS5sb2coImNyZWF0ZWQgYnJhbmNoIGMiKTsKCiAgICBpZiAodGhpcy5oaXN0b3J5KCkgJiYgc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiYWdlbnQiKSAhPT0gbnVsbCkgewogICAgICB0aGlzLmFwcCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiYWdlbnQiKSk7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYXBwKTsKICAgIH0gZWxzZSB7fQoKICAgIGNvbnNvbGUubG9nKCdleGl0IGNyZWF0ZWQgd2F0Y2ggZnVuY3Rpb24nKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoc3VibWlzc2lvbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy8gbGV0IHJlcXVlc3Q7CiAgICAgIC8vIC8qIFRleHQgcmVxdWVzdCAqLwogICAgICAvLyBpZiAoc3VibWlzc2lvbi50ZXh0KSB7CiAgICAgIC8vICAgcmVxdWVzdCA9IHsKICAgICAgLy8gICAgIHNlc3Npb246IHRoaXMuc2Vzc2lvbiwKICAgICAgLy8gICAgIHF1ZXJ5SW5wdXQ6IHsKICAgICAgLy8gICAgICAgdGV4dDogewogICAgICAvLyAgICAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCwKICAgICAgLy8gICAgICAgICBsYW5ndWFnZUNvZGU6IHRoaXMubGFuZygpLAogICAgICAvLyAgICAgICB9LAogICAgICAvLyAgICAgfSwKICAgICAgLy8gICB9OwogICAgICAvLyB9CiAgICAgIHZhciB0ZXh0ID0gewogICAgICAgIHNlbnRlbmNlOiBzdWJtaXNzaW9uLnRleHQKICAgICAgfTsKICAgICAgdmFyIGhlYWRlciA9IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgIH07IC8vIGVsc2UgaWYgKHN1Ym1pc3Npb24uYXVkaW8pIHsKICAgICAgLy8gLyogQXVkaW8gcmVxdWVzdCAqLwogICAgICAvLyAgIHJlcXVlc3QgPSB7CiAgICAgIC8vICAgICBzZXNzaW9uOiB0aGlzLnNlc3Npb24sCiAgICAgIC8vICAgICBxdWVyeUlucHV0OiB7CiAgICAgIC8vICAgICAgIGF1ZGlvQ29uZmlnOiB7CiAgICAgIC8vICAgICAgICAgYXVkaW9FbmNvZGluZzogIkFVRElPX0VOQ09ESU5HX1VOU1BFQ0lGSUVEIiwKICAgICAgLy8gICAgICAgICBsYW5ndWFnZUNvZGU6IHRoaXMubGFuZygpLAogICAgICAvLyAgICAgICB9LAogICAgICAvLyAgICAgfSwKICAgICAgLy8gICAgIGlucHV0QXVkaW86IHN1Ym1pc3Npb24uYXVkaW8sCiAgICAgIC8vICAgfTsKICAgICAgLy8gfQoKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5lcnJvciA9IG51bGw7CiAgICAgIHRoaXMuJGFwaS5wb3N0KCd2MS9nZW5lcmFsJywgdGV4dCwgaGVhZGVyKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIC8vdGhpcy5oYW5kbGUocmVzcG9uc2UpOwogICAgICAgIF90aGlzLm1lc3NhZ2VzLnB1c2gocmVzcG9uc2UpOwoKICAgICAgICBjb25zb2xlLmxvZyhzZXNzaW9uU3RvcmFnZSk7CiAgICAgICAgY29uc29sZS5sb2coX3RoaXMubWVzc2FnZXMpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfdGhpcy5lcnJvciA9IGVycm9yLm1lc3NhZ2U7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgIH0pOyAvLyAvKiBNYWtlIHRoZSByZXF1ZXN0IHRvIGdhdGV3YXkgKi8KICAgICAgLy8gdGhpcy5jbGllbnQKICAgICAgLy8gICAuc2VuZChyZXF1ZXN0KQogICAgICAvLyAgIC50aGVuKChyZXNwb25zZSkgPT4gewogICAgICAvLyAgICAgaWYgKHJlc3BvbnNlLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50VGV4dCkgewogICAgICAvLyAgICAgICByZXNwb25zZS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudFRleHQgPSB1cmxpZnkoCiAgICAgIC8vICAgICAgICAgcmVzcG9uc2UucXVlcnlSZXN1bHQuZnVsZmlsbG1lbnRUZXh0CiAgICAgIC8vICAgICAgICk7CiAgICAgIC8vICAgICB9CiAgICAgIC8vICAgICB0aGlzLm1lc3NhZ2VzLnB1c2gocmVzcG9uc2UpOwogICAgICAvLyAgICAgdGhpcy5oYW5kbGUocmVzcG9uc2UpOyAvLyA8LSB0cmlnZ2VyIHRoZSBoYW5kbGUgZnVuY3Rpb24gKGV4cGxhbmF0aW9uIGJlbG93KQogICAgICAvLyAgIH0pCiAgICAgIC8vICAgLmNhdGNoKChlcnJvcikgPT4gewogICAgICAvLyAgICAgdGhpcy5lcnJvciA9IGVycm9yLm1lc3NhZ2U7CiAgICAgIC8vICAgfSkKICAgICAgLy8gICAudGhlbigoKSA9PiAodGhpcy5sb2FkaW5nID0gZmFsc2UpKTsKICAgIH0sCiAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShyZXNwb25zZSkgewogICAgICAvKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIHNwZWVjaCBvdXRwdXQgKi8KICAgICAgLy8gaWYgKHJlc3BvbnNlLm91dHB1dEF1ZGlvKSB7CiAgICAgIC8vICAgY29uc3Qgb3V0cHV0ID0gbmV3IEF1ZGlvKAogICAgICAvLyAgICAgYGRhdGE6YXVkaW8vbXAzO2Jhc2U2NCwke3Jlc3BvbnNlLm91dHB1dEF1ZGlvfWAKICAgICAgLy8gICApOwogICAgICAvLyAgIG91dHB1dC5vbmVuZGVkID0gKCkgPT4gdGhpcy4kcmVmcy5pbnB1dC5saXN0ZW4oKTsKICAgICAgLy8gICBpZiAoIXRoaXMubXV0ZWQpIG91dHB1dC5wbGF5KCk7CiAgICAgIC8vIH0gCiAgICAgIHsKICAgICAgICB2YXIgdGV4dDsgLy8gPC0gaW5pdCBhIHRleHQgdmFyaWFibGUKICAgICAgICAvL3RleHQgPSByZXNwb25zZS5kYXRhLnF1ZXJ5VGV4dDsKICAgICAgICAvLyAvKiBEaWFsb2dmbG93IFRleHQvU2ltcGxlUmVzcG9uc2VzICovCiAgICAgICAgLy8gZm9yIChjb25zdCBjb21wb25lbnQgaW4gcmVzcG9uc2UucXVlcnlSZXN1bHQuZnVsZmlsbG1lbnRNZXNzYWdlcykgewogICAgICAgIC8vICAgaWYgKHJlc3BvbnNlLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XS50ZXh0KQogICAgICAgIC8vICAgICB0ZXh0ID0KICAgICAgICAvLyAgICAgICByZXNwb25zZS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudE1lc3NhZ2VzW2NvbXBvbmVudF0udGV4dC50ZXh0WzBdOwogICAgICAgIC8vICAgaWYgKAogICAgICAgIC8vICAgICByZXNwb25zZS5xdWVyeVJlc3VsdC5mdWxmaWxsbWVudE1lc3NhZ2VzW2NvbXBvbmVudF0uc2ltcGxlUmVzcG9uc2VzCiAgICAgICAgLy8gICApCiAgICAgICAgLy8gICAgIHRleHQgPQogICAgICAgIC8vICAgICAgIHJlc3BvbnNlLnF1ZXJ5UmVzdWx0LmZ1bGZpbGxtZW50TWVzc2FnZXNbY29tcG9uZW50XQogICAgICAgIC8vICAgICAgICAgLnNpbXBsZVJlc3BvbnNlcy5zaW1wbGVSZXNwb25zZXNbMF0udGV4dFRvU3BlZWNoOwogICAgICAgIC8vIH0KICAgICAgICAvLyAvKiBBY3Rpb25zIG9uIEdvb2dsZSBTaW1wbGUgcmVzcG9uc2UgKi8KICAgICAgICAvLyBpZiAoCiAgICAgICAgLy8gICByZXNwb25zZS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZCAmJgogICAgICAgIC8vICAgcmVzcG9uc2UucXVlcnlSZXN1bHQud2ViaG9va1BheWxvYWQuZ29vZ2xlCiAgICAgICAgLy8gKSB7CiAgICAgICAgLy8gICBmb3IgKGNvbnN0IGNvbXBvbmVudCBpbiByZXNwb25zZS5xdWVyeVJlc3VsdC53ZWJob29rUGF5bG9hZC5nb29nbGUpIHsKICAgICAgICAvLyAgICAgaWYgKAogICAgICAgIC8vICAgICAgIHJlc3BvbnNlLnF1ZXJ5UmVzdWx0LndlYmhvb2tQYXlsb2FkLmdvb2dsZVtjb21wb25lbnRdCiAgICAgICAgLy8gICAgICAgICAuc2ltcGxlUmVzcG9uc2UKICAgICAgICAvLyAgICAgKQogICAgICAgIC8vICAgICAgIHRleHQgPQogICAgICAgIC8vICAgICAgICAgcmVzcG9uc2UucXVlcnlSZXN1bHQud2ViaG9va1BheWxvYWQuZ29vZ2xlW2NvbXBvbmVudF0KICAgICAgICAvLyAgICAgICAgICAgLnNpbXBsZVJlc3BvbnNlLnRleHRUb1NwZWVjaDsKICAgICAgICAvLyAgIH0KICAgICAgICAvLyB9CiAgICAgICAgLy8gY29uc3Qgc3BlZWNoID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSh0ZXh0KTsKICAgICAgICAvLyBzcGVlY2gudm9pY2VVUkkgPSB0aGlzLmNvbmZpZy52b2ljZTsKICAgICAgICAvLyBzcGVlY2gubGFuZyA9IHRoaXMubGFuZygpOwogICAgICAgIC8vIHNwZWVjaC5vbmVuZCA9ICgpID0+IHRoaXMuJHJlZnMuaW5wdXQubGlzdGVuKCk7CiAgICAgICAgLy8gaWYgKCF0aGlzLm11dGVkKSB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLnNwZWFrKHNwZWVjaCk7IC8vIDwtIGlmIGFwcCBpcyBub3QgbXV0ZWQsIHNwZWFrIG91dCB0aGUgc3BlZWNoCiAgICAgIH0KICAgIH0KICB9Cn07"},null]}